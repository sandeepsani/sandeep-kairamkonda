#include <bits/stdc++.h>
using namespace std;
//calculate the longest Palindrome
int longestPalindromeDP(string str)
{
    int len = str.size();
    //initialize a boolean dp table 
    bool dp[len][len];
    //set all to 0 
    memset(dp, 0, sizeof(dp));
    
    //all 1 length chars are Palindrome
    //so set the result as 1 
    int result = 1;
    
    //set all diagonal values to true/1 
    for (int i = 0; i < len; ++i)
        dp[i][i] = true;
    
    //check for size 2 substrings 
    for (int i = 0; i < len - 1; ++i) {
        //if theres a palindrome of size 2 update the result to 2 
        if (str[i] == str[i + 1]) {
            dp[i][i + 1] = true;
            result = 2;
        }
    }
    
    //now start checking for length 3 and above
    for (int length = 3; length <= len; length++) {
        for (int start = 0; start < len - length + 1; start++) {
            int end= start + length - 1;
            //check if first and last element are equal and if
            //in between elements are a palindrome from the dp table 
            //created using dp[i+1][j-1] , if its 1 means theres a
            //palindrome in between
            if (dp[start+ 1][end - 1] && str[start] == str[end]) {
                dp[start][end] = true;
                if (length > result) {
                    result = length;
                }
            }
        }
    }
    //return the result 
    return result;
}

//main driver method
int main()
{
	string str = "ABCBDEDB";
	cout << longestPalindromeDP(str);
	return 0;
}